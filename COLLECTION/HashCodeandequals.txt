╔═══════════════════╗
║ HashCode & Equals ║
╚═══════════════════╝
1. 	If two objects are considered equal, they must have the same hashCode().
2. 	If hashCode() of two object is the same, THEN equals() might still return false.
3.	During the lifetime of an object, hashCode() will return the same value unless object properties got change.
equals() must also remain consistent (i.e., multiple calls should return the same result unless object properties change).

╔══════════╗
║ HashCode ║
╚══════════╝
hashCode() is a method that returns an integer hash value representing the object.
It is used for efficient storage and retrieval in hash-based collections like HashMap, HashSet, and Hashtable.
The default implementation in Object is based on the memory address, but you should override it to generate a meaningful hash.
---------------------------------
When hashCode() is Not Overridden?
----------------------------------
If we do not override then default implementation of hashcode will be used which uses the memory address, it means each instance gets a different hash code.
This leads to performance issues in HashMap because even they are equal according to the equals() method will be placed in different buckets.

Example:

public class Student {
    private int id;
    private String name;
    public Student(int id, String name) {
        this.name = name;
        this.id = id;
    }
    public int getId() {
        return id;
    }
    public void setId(int id) {
        this.id = id;
    }
    public String getName() {
        return name;
    }
    public void setName(String name) {
        this.name = name;
    }
}

public class HashcodeEquals {
    public static void main(String[] args) {
        Student alex1 = new Student(1, "Alex");
        Student alex2 = new Student(1, "Alex");
        System.out.println("alex1 hashcode = " + alex1.hashCode());
        System.out.println("alex2 hashcode = " + alex2.hashCode());
        System.out.println("Checking equality between alex1 and alex2 = " + alex1.equals(alex2));
    }
}
Output

alex1 hashcode = 1852704110
alex2 hashcode = 2032578917
Checking equality between alex1 and alex2 = false