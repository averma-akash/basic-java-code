HashMap Working:

Hashmap works on the principle of Hashing, we have put() and get() method for storig and retreiving object from hashmap. when we pass both key and value to put method to store on hashmap it uses key obejct hashcode() method to calculate hashcode and them by aplying hashing on that hashcode it identifies bucket location for storing value object.

while retreiving it use the key object equals method to find out the correct key value pair and return the value object associated with that key

Hashmap uses linked list in case of collision and object will be stored in the next node of the linked list. also hashmap stores bot key and value in every node of the linked list in form of map.entry object.

--> If 2 diffrent object have the same hashcode then bucket location would be same and collision occur in hashmap.

if two keys have same hashcode then we wil call get method and then hashmap use key object hashcode to find out bucket location, after finding bucket location we will call key.equals method to identify a crrect node in linked list and return associated value object for that key in java hash map.


Java 8 has started using a balanced tree instead of linked list for storing collided entries. This also means that in the worst case you will get a performance boost from O(n) to O(log n).

The threshold of switching to the balanced tree is defined as TREEIFY_THRESHOLD constant in java.util.HashMap JDK 8 code. Currently, it's value is 8, which means if there are more than 8 elements in the same bucket than HashMap will use a tree instead of linked list to hold them in the same bucket.






Hash Set Working:

Hashset class internally use hashmap to store its element , from add method of hashset put method of hashmap is called where the value whu=ich ahs to be added in the set becomes key and a constant object "present" is used as value.

it just the actual value becomes key and a dummy value present is added as value when storing it in the backing hashmap.