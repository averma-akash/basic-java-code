╔═════════╗
║ HashMap ║
╚═════════╝
1. HashMap internally uses an array of buckets and Each bucket contains a linked list (before Java 8) or a balanced tree (after Java 8).
2. When we add elements it Compute hash code using key.hashCode() and uses hash function to find the bucket index.***index = (n - 1) & hash;
3. If bucket is empty it will store the new entry else it will check if the key already exists 
4. If it found the key present then it will replace it else it will new entry.
4. when we Retrieving an Element by get method get(K key) it Compute hash code using key.hashCode().
Use hash function to find the bucket index.
If single entry, return value. If multiple entries (collision case), iterate using equals() to find the correct key.
╔════════════════╗
║ Hash Collision ║
╚════════════════╝
A hash collision occurs when two different keys in a hash-based data structure (like HashMap) produce the same hash code and are assigned to the same bucket.

Before Java 8: Uses Linked List to store multiple values in the same bucket.
After Java 8: Converts to Balanced Tree (Red-Black Tree) if collisions exceed 8 elements in a bucket (Improves performance from O(n) to O(log n)).
╔════════════════╗
║ HashSet Workin ║
╚════════════════╝
Hashset class internally use hashmap to store its element , from add method of hashset, put method of hashmap is called where the value which has to be added in the set becomes key and a constant object "present" is used as value.

it just the actual value becomes key and a dummy value present is added as value when storing it in the backing hashmap.
╔═══════════════════╗
║ ConcurrentHashMap ║
╚═══════════════════╝
ConcurrentHashMap is introduced as an alternative of Hashtable and provided all functions supported by Hashtable with an additional feature called "concurrency level", which allows ConcurrentHashMap to partition Map. ConcurrentHashMap allows multiple readers to read concurrently without any blocking. 

This is achieved by partitioning Map into different parts based on concurrency level and locking only a portion of Map during updates. The default concurrency level is 16, and accordingly, Map is divided into 16 part and each part is governed with a different lock. 

This means, 16 threads can operate on Map simultaneously until they are operating on a different part of Map. This makes ConcurrentHashMap high performance despite keeping thread-safety intact. 
╔═══════════════════╗
║Why we need ConcurrentHashMap when we already had Hashtable ?
╚═══════════════════╝
Hashtable Uses Synchronized Methods
----------------------
Hashtable synchronizes every method, means only one thread can operate on it at a time.
Even read operations (get()) are synchronized, which is unnecessary and slows down performance in multi-threaded environments

ConcurrentHashMap Uses Segment-Based Locking 
----------------
ConcurrentHashMap divides the map into multiple segments (buckets) and locks only the specific segment being modified
Read operations (get()) are non-blocking, improving performance.

ConcurrentHashMap Uses CAS (Compare-And-Swap) for Atomic Operations
------------------
Unlike Hashtable, which uses synchronized blocks, ConcurrentHashMap optimizes performance using CAS (Compare-And-Swap) for atomic updates.
This reduces contention and makes operations like putIfAbsent(), compute(), and merge() much faster.

Why use Concurrent Hashmap-

We use ConcurrentHashMap when a high level of concurrency is required.
But already SynchronizedMap is present so what advantages does ConcurrentHashMap have over synchronized map.Both are thread safe. 

The major advantage is in case of synchronizedMap every write operation acquires lock on entire SynchronizedMap while in case of ConcurrentHashMap the lock is only on one of the segments.