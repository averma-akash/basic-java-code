An interface is a 100% abstract class. It can have only static, final, and public fields and abstract methods. 
It’s frequently referred to as a blueprint of a class as well. Java interfaces allow us to implement multiple inheritance in our code, 
as a class can implement any number of interfaces. Classes can access an interface using the implements keyword.

interface Animal {
	public void eat();
	public void sound();
}

interface Bird {
	int numberOfLegs = 2;
	String outerCovering = "feather";

	public void fly();
}

The class Eagle implements both interfaces. It defines its own functionality for the three abstract methods. The eat() and sound() methods come from the Animal class, while fly() comes from Bird.

class Eagle implements Animal, Bird {
	public void eat() {
		System.out.println("Eats reptiles and amphibians.");
	}
	public void sound() {
		System.out.println("Has a high-pitched whistling sound.");
	}
	public void fly() {
		System.out.println("Flies up to 10,000 feet.");
	}
}

In the TestEagle test class, instantiate a new Eagle object (called myEagle) and print out all the fields and methods to the console.

As static fields don’t belong to a specific object but to a whole class, you need to access them from the Bird interface instead of the myEagle object.

class TestEagle {
	public static void main(String[] args) {
		Eagle myEagle = new Eagle();

		myEagle.eat();
		myEagle.sound();
		myEagle.fly();

		System.out.println("Number of legs: " + Bird.numberOfLegs);
		System.out.println("Outer covering: " + Bird.outerCovering);
	}
}

[Console output of TestEagle]
Eats reptiles and amphibians.
Has a high-pitched whistling sound.
Flies up to 10,000 feet.
Number of legs: 2
Outer covering: feather