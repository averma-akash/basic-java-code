╔══════╗
║ BEAN ║
╚══════╝
Any normal java class that is initialised by spring IOC container is called bean. Spring ioc container manages the life cycle of bean, beanscope and injecting any required dependency in the bean.
╔══════════════════════════════╗
║ What Is Inversion of Control ║
╚══════════════════════════════╝
Inversion of control is a pattern used to decouple the dependencies between layers and components in the system. The Dependency-Injection (DI) pattern is an example of an IoC pattern that helps in removing dependencies in the code.

The advantages of this architecture are:

decoupling the execution of a task from its implementation
making it easier to switch between different implementations
greater modularity of a program
greater ease in testing a program by isolating a component or mocking its dependencies, and allowing components to communicate through contracts
╔══════════════════════╗
║ Spring IoC Container ║
╚══════════════════════╝
An IoC container is a common characteristic of frameworks that implement IoC.

In the Spring framework, the interface ApplicationContext represents the IoC container. The Spring container is responsible for instantiating, configuring and assembling objects known as beans, as well as managing their life cycles.

The Spring framework provides several implementations of the ApplicationContext interface: ClassPathXmlApplicationContext and FileSystemXmlApplicationContext for standalone applications, and WebApplicationContext for web applications.

In order to assemble beans, the container uses configuration metadata, which can be in the form of XML configuration or annotations.
╔══════════════════════╗
║ Dependency Injection ║
╚══════════════════════╝
Dependency injection, an aspect of Inversion of Control (IoC), is a concept stating that we are able to pass (inject) the dependencies when required instead of initializing the dependencies inside of the recipient class.. 
Then an IoC container will instantiate required classes if needed.

In Java, the 2 major ways of achieving dependency injection are:

Constructor injection: Here, the IoC container invokes the class constructor with a number of arguments where each argument represents a dependency on the other class.

Setter injection: Here, the spring container calls the setter methods on the beans after invoking a no-argument static factory method or default constructor to instantiate the bean.
╔════════════════════════════════════════════╗
║ diff btwn constructor and setter injection ║
╚════════════════════════════════════════════╝
In constructor injection, partial injection is not allowed whereas it is allowed in setter injection.
The constructor injection doesn’t override the setter property whereas the same is not true for setter injection.
Constructor injection creates a new instance if any modification is done. The creation of a new instance is not possible in setter injection.
In case the bean has many properties, then constructor injection is preferred. If it has few properties, then setter injection is preferred.
╔════════════╗
║ Bean scope ║
╚════════════╝
The Spring Framework has five scope supports. They are:

Singleton: The scope of bean definition while using this would be a single instance per IoC container.
Prototype: Here, the scope for a single bean definition can be any number of object instances.
Request: The scope of the bean definition is an HTTP request.
Session: Here, the scope of the bean definition is HTTP-session.
Global-session: The scope of the bean definition here is a Global HTTP session.

╔═════════════════╗
║ Bean life cycle ║
╚═════════════════╝
The Bean life cycle is as follows:

The IoC container instantiates the bean from the bean’s definition in the XML file.
Spring then populates all of the properties using the dependency injection as specified in the bean definition.
The bean factory container calls setBeanName() which take the bean ID and the corresponding bean has to implement BeanNameAware interface.
The factory then calls setBeanFactory() by passing an instance of itself (if BeanFactoryAware interface is implemented in the bean).
If BeanPostProcessors is associated with a bean, then the preProcessBeforeInitialization() methods are invoked.
If an init-method is specified, then it will be called.
Lastly, postProcessAfterInitialization() methods will be called if there are any BeanPostProcessors associated with the bean that needs to be run post creation.
╔════════════════════════════════════╗
║ Bean Factory vs ApplicationContext ║
╚════════════════════════════════════╝

1) BeanFactory is basic container, it can only create objects and inject Dependencies.But we can not attach other services like security, transaction ,messaging etc. To provied all the services we have to use ApplicationContext Container.

2) BeanFactory Container doesn't support the feature of AutoScanning , but ApplicationContext Container supports.

3) Beanfactory Container will not create a bean object upto the request time.It means Beanfactory Container loads beans laziely. While ApplicationContext Container creates objects of Singleton bean at the time of loading only.It means there is early loading.

4) Beanfactory Container support only two scopes (singleton & prototype) of the beans. But ApplicationContext Container supports all the beans scope.

╔═════════════════════════════════════════════
║ Difference between java singleton and Spring Singleton 
╚═════════════════════════════════════════════

The Java singleton is scoped by the Java class loader, the Spring singleton is scoped by the container context.
╔═════════════════════╗
║ Circular Dependency ║
╚═════════════════════╝
When class A requires an instance of class B through constructor/setter injection, and class B requires an instance of class A through constructor/setter injection and you configure beans for classes A and B to be injected into each other, the Spring IoC container detects this circular reference at runtime, and throws a BeanCurrentlyInCreationException.

A circular dependency between bean A and bean B forces one of the beans to be injected into the other prior to being fully initialized itself.

Possible Solutions:

1. Refactor the design to remove circular dependency
2. Use @Lazy autowiring
	@Component
public class Bean1 {

    @Lazy
    @Autowired
    private Bean2 bean2;
}
3. Use Setter Injection instead of constructor injection
4. Use PostConstruct to set one way dependency
@Component("bean1")
public class Bean1 {

    @Autowired
    private Bean2 bean2;

    @PostConstruct          
    public void init() {
        bean2.setBean1(this);
    }
}


@Component("bean2")
public class Bean2 {

    private Bean1 bean1;   

    public void setBean1(Bean1 bean1) {
        this.bean1 = bean1;
    }
}

5. Get Spring beans programmatically : We can programmatically retrieve a Spring bean either by its name or by its class using ApplicationContext provided by Spring.

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.ApplicationContext;
import org.springframework.stereotype.Component;

@Component
public class ContextProvider {

    @Autowired
    private ApplicationContext appContext;

    /**
     * Get a Spring bean by type.
     **/
    public <T> T getBean(Class<T> beanClass) {
        return appContext.getBean(beanClass);
    }

    /**
     * Get a Spring bean by name.
     **/
    public Object getBean(String beanName) {
        return appContext.getBean(beanName);
    }

}