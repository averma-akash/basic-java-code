service registry

The service registry is a database populated with information on how to dispatch requests to microservice instances. Interactions between the registry and other components can be divided into two groups:

Service Registration
Service Discovery

Service Registry:
------------------
A service registry is a database used to keep track of the available instances of each microservice in an application. The service registry needs to be updated each time a new service comes online and whenever a service is taken offline or becomes unavailable. This can be achieved with either self-registration or third-party registration. 

Self-Registration:
------------------
With self-registration, each microservice is responsible for adding itself to the service registry when it comes online. Typically, the service registry exposes a REST API for this purpose. Each instance registers itself with a POST request and can remove itself with a DELETE request. As a fail-safe, service instances can send a heartbeat to the service registry to indicate that they are still online and available. If the heartbeat stops, this indicates that the instance is either offline or not responding, and the instance can be de-registered. 

Third-Party Registration
------------------------
Third-party registration offers a more loosely coupled solution: a service manager is responsible for registering each new instance as it comes online and de-registering it when it becomes unavailable. The service registrar does this by polling the deployment environment for updates or subscribing to event notifications. example: Apache ZooKeeper or Netflix Eureka.

Service Discovery:
--------------------
In order to send an API request to a service, the client must know the location of the service that it is addressing.
There are two ways:
Client-Side Discovery
---------------------
With client-side discovery, the client making the request is responsible for identifying the location of the service instance and routing the request to it. The client begins by querying the service registry to identify the location of the available instances of the service and then determines which instance to use. 

Server-Side Discovery
---------------------
the client simply passes the request, including the DNS name, to a router. The router queries the service registry  to identify the available instances of the service and then applies load balancing logic to decide which one to use. 
