+----------------+
| AOP DEFINATION |
+----------------+

Aspect-oriented programming or AOP is a programming technique which allows programmers to modularize crosscutting concerns or behavior that cuts across the typical divisions of responsibility. Examples of cross-cutting concerns can be logging and transaction management.

The core of AOP is an aspect. It encapsulates behaviors that can affect multiple classes into reusable modules.

╔════════╗
║ ASPECT ║
╚════════╝
 Aspect is a class that implement cross cutting concern. Transaction management is a good example of a crosscutting concern in J2EE applications. Aspects are implemented using regular classes or regular classes annotated with the @Aspect annotation in Spring Framework.

╔═══════════╗
║ JOINPOINT ║
╚═══════════╝

A join point is a specific point in the application such as the execution of a method or the handling of an exception. In Spring AOP, a joinpoint always represents a method execution.

╔════════╗
║ ADVICE ║
╚════════╝

An Action taken by an aspect at a particular joinpoint is known as an Advice. Spring AOP uses an advice as an interceptor, maintaining a chain of interceptors “around” the join point.
╔══════════════╗
║ ADVICE TYPES ║
╚══════════════╝

Different types of Advices in Spring AOP are:

Before: These types of advices execute before the joinpoint methods and are configured using @Before annotation mark.

After returning: These types of advices execute after the joinpoint methods completes executing normally and are configured using @AfterReturning annotation mark.

After throwing:  These types of advices execute only if joinpoint method exits by throwing an exception and are configured using @AfterThrowing annotation mark.

After (finally): These types of advices execute after a joinpoint method, regardless of the method’s exit whether normally or exceptional return and are configured using @After annotation mark.

Around: These types of advices execute before and after a joinpoint and are configured using @Around annotation mark.

************  Spring AOP vs AspectJ AOP ************




************ What are cross-cutting concerns? ************
In any application, there is some generic functionality that is needed in many places. But this functionality is not related to the application's business logic. Suppose you perform a role-based security check before every business method in your application. Here security is a cross-cutting concern. It is required for any application but it is not necessary from the business point of view, it is a simple generic functionality we have to implement in many places in the application. The following are examples of the cross-cutting concerns for the enterprise application.

Logging and tracing
Transaction management
Security
Caching
Error handling
Performance monitoring
Custom business rules

 