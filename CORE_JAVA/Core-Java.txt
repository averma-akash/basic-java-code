1. Callable Vs Runnable ?

Runnable interface
It is a part of java.lang package since Java 1.0
It cannot return the return of computation.
It cannot throw a checked Exception.
In a runnable interface, one needs to override the run() method in Java.		

Callable Interface
It is a part of the java.util.concurrent package since Java 1.5.
It can return the result of the parallel processing of a task.
It can throw a checked Exception.
In order to use Callable, you need to override the call()

2. Imuutable object ?

The immutable objects are objects whose value can not be changed after initialization. We can not change anything once the object is created. For example, primitive objects such as int, long, float, double, all legacy classes, Wrapper class, String class, etc.

3. String pool ?

String pool is a storage area in Java heap where string literals stores. By default, it is empty and privately maintained by the Java String class. Whenever we create a string the string object occupies some space in the heap memory.

The JVM performs some steps during the initialization of string literals that increase the performance and decrease the memory load. To decrease the number of String objects created in the JVM the String class keeps a pool of strings.

When we create a string literal, the JVM first check that literal in the String pool. If the literal is already present in the pool, it returns a reference to the pooled instance. If the literal is not present in the pool, a new String object takes place in the String pool.

4. How to Create an Immutable Class

The following things are essential for creating an immutable class:

Final class, which is declared as final so that it can't be extended.
All fields should be private so that direct access to the fields is blocked.
No Setters
All mutable fields should be as final so that they can not be iterated once initialized.

public class JtpExample1 {  
        private final String s;  
        JtpExample1(final String s) {  
        this.s = s;  
        }  
        public final String getName() {  
        return s;  
        }  
        public static void main(String[] args) {  
        JtpExample obj = new JtpExample("Core Java Training");  
        System.out.println(obj.getName());  
        }  
        }  
		
		
************* 1. How would you differentiate between a String, StringBuffer, and a StringBuilder? *************

     -  Storage area: In string, the String pool serves as the storage area. For StringBuilder and StringBuffer, heap memory is the storage area.

    -  Mutability: A String is immutable, whereas both the StringBuilder and StringBuffer are mutable.

  -  Efficiency: It is quite slow to work with a String. However, StringBuilder is the fastest in performing operations. The speed of a StringBuffer is more   than a String and less than a StringBuilder. (For example appending a character is fastest in StringBuilder and very slow in String because a new memory is required for the new String with appended character.)

 -  Thread-safe: In the case of a threaded environment, StringBuilder and StringBuffer are used whereas a String is not used. However, StringBuilder is suitable for an environment with a single thread, and a StringBuffer is suitable for multiple threads.
- Syntax:

// String

String first = "InterviewBit";

String second = new String("InterviewBit");

// StringBuffer

StringBuffer third = new StringBuffer("InterviewBit");

// StringBuilder

StringBuilder fourth = new StringBuilder("InterviewBit");


************* Why Java Strings are immutable in nature? *************

string objects are immutable in nature which simply means once the String object is created its state cannot be modified. Whenever we try to update the value of that object instead of updating the values of that particular object, Java creates a new string object. Java String objects are immutable as String objects are generally cached in the String pool.


************* Using relevant properties highlight the differences between interfaces and abstract classes. *************

Availability of methods: Only abstract methods are available in interfaces, whereas non-abstract methods can be present along with abstract methods in abstract classes.

Variable types: Static and final variables can only be declared in the case of interfaces, whereas abstract classes can also have non-static and non-final variables.

Inheritance: Multiple inheritances are facilitated by interfaces, whereas abstract classes do not promote multiple inheritances.

Data member accessibility: By default, the class data members of interfaces are of the public- type. Conversely, the class members for an abstract class can be protected or private also.

Implementation: With the help of an abstract class, the implementation of an interface is easily possible. However, the converse is not true;


Trasient keyword is used to avoid serialization of a variable.

private transient String xyz; 

  ************* What do you understand by Object Cloning and how do you achieve it in Java? *************

It is the process of creating an exact copy of any object. In order to support this, a java class has to implement the Cloneable interface of java.lang package and override the clone() method provided by the Object class the syntax of which is:

protected Object clone() throws CloneNotSupportedException{
return (Object)super.clone();
}

In case the Cloneable interface is not implemented and just the method is overridden, it results in CloneNotSupportedException in Java.


*************  What is JIT compiler in Java? *************

JIT stands for Just-In-Time compiler in Java. It is a program that helps in converting the Java bytecode into instructions that are sent directly to the processor. By default, the JIT compiler is enabled in Java and is activated whenever a Java method is invoked. The JIT compiler then compiles the bytecode of the invoked method into native machine code, compiling it “just in time” to execute. Once the method has been compiled, the JVM summons the compiled code of that method directly rather than interpreting it.

 