***********

Hibernate is a java based persistance framework and an orm framework that basically allow a developer to map POJO to relational database table.

****** Session ******

A session is an object that maintains the connection between java object application and database.
Session also has method for storing, retreiving, modifying, deleting data from database.

****** Are session objects thread safe? ******

Session objects are not thread safe and need to be used in single thread. Every thread should have their own session object and close it once it is done with the work.

******* Session Factory *******

SessionFactory is the factory class used to get the Session objects. SessionFactory is responsible to read the hibernate configuration parameters and connect to the database and provide Session objects
Internal state of SessionFactory is immutable, so it’s thread safe. Multiple threads can access it simultaneously to get Session instances.

******** Hibernate Mapping file *******

is an xml file that is used for defining the entity bean field and corresponding database column mapping. These files are used when the project use 3rd party class where JPA annotation provided by hibernate cannot be used.

******** Commonly used annotation *******

@Entity: used on model class and teslls that the class are entity bean.
@Table: used on model class and teslls that the class map to the table name.
@Id: for primary key
@EmbeddedId: as composite key

********* getCurrentSession() vs openSession() ********

getCurrentSession method returns the session bound to context
getCurrentSession object scope belongs to the hibernate context and to make this work hibernate configuration file has to be modified by adding property otherwise throw hibernate exception.
getCurrentSession object get closed once the session factory is closed.


openSession open a new session
openSession new session object has to be created for each request in a multithreaded environment.
openSession developer responsibilty to close this object.

******** Criteria API ********
help to build dynamic criteria queries on the persistance database.
The Session interface of hibernate framework has create  creitera method that takes the persistance object class or its entity name as parameter
Criteria criteria = Session.createCriteria(className.class);
List<ClassName> result = criteria.list();

******** Hibernate Caching ********

Hibernate Caching is the strategy for improving the application performance by pooling object in cache so that the queries are executed faster.
it is useful when fetching the same data that is excuted multiple times.

******** First Level Cache vs second level Cache ********

First level cache is local to session object and cannot be shared between multiple session.
Second level cache is maintained at the session factory level and shared among all session in hibernate.

First level cache is enable by default and there is no way to disable it.
second level cache is disabled by default and we have to enable it through configuration.

First level cache is available only until the session is open.
Second level cache is open through out teh apllication.

******* Get() vs Load() *******

Get method get the data from database as sson as it is called.
Load method return a proxy object and loads the data only when it is required.

Get method hit database everytime.
Load method hit database only when it s really requiured and this is lazy loading which maks the method better.

Get method return null if object is not found.
Load method thorw ObjectNotFound Exception.

Get method is used if we are unsure about data existance in database.
Load method is used when we know for sure that the data is present.  

******* What are states of object in hibernate? ********

Transient : If object is in transient state, it means it was never associated with session and just created.
Persistent :  If object is in persistent state, it means it is associated with session and we just saved or retrieved object from database.
Detached : If object is in detached state, it means session is closed and object is no more part of session. If we call merge or update, object goes back to persistent state.

******* What are differences between save and saveOrUpdate method of session object? *******

save(): stores object in database. It generates identifier for tQhe object and returns it. If object already exists in database, it will throw an error.
saveOrUpdate(): SaveOrUpdate method save the object if identifies does not exist. If it exists , it calls update method.


******* Can we execute native sql in hibernate? *******

// Crate session object
SessionFactory sf = HibernateUtil.getSessionFactory();
Session session = sf.getCurrentSession();
 
// Get list of employees with help of SQLQuery.
Transaction tx = session.beginTransaction();
SQLQuery sqlQuery = session.createSQLQuery("select id, name, age from Employee");
List<Object[]> rows = sqlQuery.list();
for(Object[] row : rows){
    Employee employee = new Employee();
    employee.setId(Long.parseLong(row[0].toString()));
    employee.setName(row[1].toString());
    employee.setAge(Integer.parseInt(row[2].toString()));
    System.out.println(employee);
}

******* What is dialect in Hibernate? *******

A hibernate dialect gives information to the framework of how to convert hibernate queries(HQL) into native SQL queries.

For example:
Dialect for mysql database: org.hibernate.dialect.MySQL5Dialect
Dialect for sqlserver database: org.hibernate.dialect.SQLServer2005Dialect

If we do not specify Dialect class in configuration, for most of the databases Hibernate try to resolve dialect name from database connection. It’s best practice to provide dialect, so that Hibernate identifies appropriate Dialect class for specific database version.

******* Can we declare Entity class as final in hibernate? *******

Yes, we can declare entity class as final but it is not considered as a good practice because hibernate uses proxy pattern for lazy initialisation, If we declare it as final then hibernate won’t be able to create sub class and won’t be able to use proxy pattern, so it will limit performance and improvement options.

******* What is lazy loading in hibernate? *******

It is used for performance improvement. Lazy loading means when we load parent, child objects won’t get loaded until requested. Infact hibernate loads child objects automatically when we access them. It improves performance as we are not loading whole object at once.

******* What is LazyInitializationException in Hibernate? Why do we get it? *******

This exception generally occurs when we use lazy loading and child objects are accessed after closing session.

*****************************************

// Crate session object
SessionFactory sf = HibernateUtil.getSessionFactory();
Session session = sf.getCurrentSession();
 
// Get list of employees with help of SQLQuery.
Transaction tx = session.beginTransaction();
SQLQuery sqlQuery = session.createSQLQuery("select id, name, age from Employee");
List<Object[]> rows = sqlQuery.list();
for(Object[] row : rows){
    Employee employee = new Employee();
    employee.setId(Long.parseLong(row[0].toString()));
    employee.setName(row[1].toString());
    employee.setAge(Integer.parseInt(row[2].toString()));
    System.out.println(employee);
}
 
 
******** What are the advantages of Hibernate over JDBC? ********

Hibernate removes a lot of boiler-plate code that comes with JDBC API, the code looks more cleaner and readable.

Hibernate supports inheritance, associations and collections. These features are not present with JDBC API

Hibernate implicitly provides transaction management, in fact most of the queries can’t be executed outside transaction. In JDBC API, we need to write code for transaction management using commit and rollback.

JDBC API throws SQLException that is a checked exception, so we need to write a lot of try-catch block code. 
Hibernate wraps JDBC exceptions and throw JDBCException or HibernateException un-checked exception, so we don’t need to write code to handle it.

Hibernate supports caching that is better for performance, JDBC queries are not cached hence performance is low.

******** How to configure Hibernate Second Level Cache using EHCache? ***********

EHCache is the best choice for utilizing hibernate second level cache. Following steps are required to enable EHCache in hibernate application.
Add hibernate-ehcache dependency in your maven project, if it’s not maven then add corresponding jars.

<dependency>
        <groupId>org.hibernate</groupId>
        <artifactId>hibernate-ehcache</artifactId>
        <version>4.3.5.Final</version>
</dependency>

Add properties in hibernate configuration file.

<property name="hibernate.cache.region.factory_class">org.hibernate.cache.ehcache.EhCacheRegionFactory</property>
         
<!-- For singleton factory -->
<!-- <property name="hibernate.cache.region.factory_class">org.hibernate.cache.ehcache.SingletonEhCacheRegionFactory</property>
-->
          
<!-- enable second level cache and query cache -->
<property name="hibernate.cache.use_second_level_cache">true</property>
<property name="hibernate.cache.use_query_cache">true</property>
<property name="net.sf.ehcache.configurationResourceName">/myehcache.xml</property>

Create EHCache configuration file, a sample file myehcache.xml would look like below.

<ehcache xmlns:xsi="https://www.w3.org/2001/XMLSchema-instance"
    xsi:noNamespaceSchemaLocation="ehcache.xsd" updateCheck="true"
    monitoring="autodetect" dynamicConfig="true">
 
    <diskStore path="java.io.tmpdir/ehcache" />
 
    <defaultCache maxEntriesLocalHeap="10000" eternal="false"
        timeToIdleSeconds="120" timeToLiveSeconds="120" diskSpoolBufferSizeMB="30"
        maxEntriesLocalDisk="10000000" diskExpiryThreadIntervalSeconds="120"
        memoryStoreEvictionPolicy="LRU" statistics="true">
        <persistence strategy="localTempSwap" />
    </defaultCache>
 
    <cache name="employee" maxEntriesLocalHeap="10000" eternal="false"
        timeToIdleSeconds="5" timeToLiveSeconds="10">
        <persistence strategy="localTempSwap" />
    </cache>
 
    <cache name="org.hibernate.cache.internal.StandardQueryCache"
        maxEntriesLocalHeap="5" eternal="false" timeToLiveSeconds="120">
        <persistence strategy="localTempSwap" />
    </cache>
 
    <cache name="org.hibernate.cache.spi.UpdateTimestampsCache"
        maxEntriesLocalHeap="5000" eternal="true">
        <persistence strategy="localTempSwap" />
    </cache>
</ehcache>

Annotate entity beans with @Cache annotation and caching strategy to use. For example,

import org.hibernate.annotations.Cache;
import org.hibernate.annotations.CacheConcurrencyStrategy;

@Entity
@Table(name = "ADDRESS")
@Cache(usage=CacheConcurrencyStrategy.READ_ONLY, region="employee")
public class Address {

}

https://www.journaldev.com/2980/hibernate-ehcache-hibernate-second-level-cache

Lazy Loding fetch:

Query query = session.createQuery("Select o from Employee join fetch o.id i where o.id=:id);
query.setParameter("id",1);

CriteriaBuilder cb = em.getCriteriaBuilder();
CriteriaQuery q = cb.createQuery(Order.class);
Root o = q.from(Order.class);
o.fetch("items", JoinType.INNER);
q.select(o);
q.where(cb.equal(o.get("id"), orderId));
 
Order order = (Order)this.em.createQuery(q).getSingleResult();


@Entity
@NamedEntityGraph(name = "graph.Order.items", 
      attributeNodes = @NamedAttributeNode("items"))
public class Order implements Serializable { ... }


EntityGraph graph = this.em.getEntityGraph("graph.Order.items");
   
Map hints = new HashMap();
hints.put("javax.persistence.fetchgraph", graph);
   
Order order = this.em.find(Order.class, orderId, hints);